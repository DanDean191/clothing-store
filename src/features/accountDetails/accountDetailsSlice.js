import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchAccounts } from '../../api/fakeStore'

const initialState = {
  isLoading: false,
  hasError: false,
  accountDetails: [],
  isLoggedin: false
};

//fetchProducts().then(json => setItemData(json))

export const getAccounts = createAsyncThunk(
  'allAccounts/getAccounts',
  async () => await fetchAccounts()
)


// // The function below is called a thunk and allows us to perform async logic. It
// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// // will call the thunk with the `dispatch` function as the first argument. Async
// // code can then be executed and other actions can be dispatched. Thunks are
// // typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );


export const accountDetailsSlice = createSlice({
  name: 'allAccounts',
  initialState,
  reducers: {
    login: (state) => {
        //       // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //       // doesn't actually mutate the state because it uses the Immer library,
        //       // which detects changes to a "draft state" and produces a brand new
        //       // immutable state based off those changes
        state.isLoggedin = true;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getAccounts.pending, (state) => {
        state.isLoading = true;
        state.hasError = false;
      })
      .addCase(getAccounts.fulfilled, (state, action) => {
        state.isLoading = false;
        state.hasError = false;
        state.accountDetails = action.payload;
      })
      .addCase(getAccounts.rejected, (state, action) => {
        state.isLoading = false;
        state.hasError = true;
      })
  }
});


// export const counterSlice = createSlice({
//   name: 'counter',
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     increment: (state) => {
//       // Redux Toolkit allows us to write "mutating" logic in reducers. It
//       // doesn't actually mutate the state because it uses the Immer library,
//       // which detects changes to a "draft state" and produces a brand new
//       // immutable state based off those changes
//       state.value += 1;
//     },
//     decrement: (state) => {
//       state.value -= 1;
//     },
//     // Use the PayloadAction type to declare the contents of `action.payload`
//     incrementByAmount: (state, action) => {
//       state.value += action.payload;
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       });
//   },
// });

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export const selectAllAccounts = (state) => state.allAccounts.accountDetails;
export const checkLogin = (state, username, password ) => {
  const details = (state.allAccounts.accountDetails.find(e => e.username === username))
  if (details === undefined) return false;
  const usernameMatch = details.username === username;
  const passwordMatch = details.password === password;
  return (usernameMatch && passwordMatch)
}
export const getloadingStatus = (state) => state.allAccounts.isLoading;
export const getErrorStatus = (state) => state.allAccounts.hasError;

export default accountDetailsSlice.reducer;